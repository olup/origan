sources:
  kubernetes_logs:
    type: "kubernetes_logs"
    self_node_name: "${VECTOR_SELF_NODE_NAME}"

transforms:
  only_default_namespace:
    type: filter
    inputs: ["kubernetes_logs"]
    condition: '.kubernetes.pod_namespace == "default"'

  sanitize_kubernetes_label:
    type: "remap"
    inputs: ["only_default_namespace"]
    source: |
      if exists(.pod_labels."controller-revision-hash") {
        del(.pod_labels."controller-revision-hash")
      }
      if exists(.pod_labels."pod-template-hash") {
        del(.pod_labels."pod-template-hash")
      }

  field_remapping:
    type: remap
    inputs: ["sanitize_kubernetes_label"]
    source: |
      ._time = del(.timestamp)

  remap_message_to_json:
    type: "remap"
    inputs: ["field_remapping"]
    source: |
      structured, err = parse_json(string!(.message))

      # Only process if we manage to parse the JSON
      if err == null {
        # We don't care about these fields
        del(structured.pid)
        del(structured.hostname)

        # Remap the fields to match the Otel spec
        structured.message = del(structured.msg)
        structured.severityNumber = del(structured.level)
        structured.error = del(structured.err)

        . = merge(., structured)

        # _time is the canonical time fields for Axiom
        ._time = del(.time)
      }

sinks:
  axiom:
    type: "axiom"
    inputs: ["remap_message_to_json"]
    compression: "gzip"
    dataset: "${AXIOM_DATASET_NAME}"
    token: "${AXIOM_API_TOKEN}"
    healthcheck:
      enabled: true
      log_level: "debug"
    logging:
      level: "debug"
    log_level: "debug"
